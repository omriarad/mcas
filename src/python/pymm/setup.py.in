# Python setup.py file

import setuptools
import os
from distutils.core import setup, Extension
import distutils.sysconfig

# remove the pesky -Wstrict-prototypes flag!
#
cfg_vars = distutils.sysconfig.get_config_vars()
include_dir = '/usr/include/${PYTHON_FILENAME}'


for key, value in cfg_vars.items():
#    print("config var: {} {}".format(key, value))
    if(key == 'OPT'):
        cfg_vars[key] = value.replace("-Wstrict-prototypes", "")
        cfg_vars[key] = value.replace("-O0", "-O2")
        cfg_vars[key] += " -Wno-write-strings"  # add option to disable write strings warning
    elif(key == 'Py_DEBUG'):
        if(value == 1):
            include_dir = '/usr/include/${PYTHON_FILENAME}'

extra_compile_flags = ['-fPIC','-std=c++14','-g','-O2','-DPYMM', '-DCONFIG_DEBUG']
flag_build_pymm_valgrind = os.environ.get('BUILD_PYMM_VALGRIND', None)
if flag_build_pymm_valgrind != None:
    extra_compile_flags.append("-DBUILD_PYMM_VALGRIND")

print(">>", extra_compile_flags)

pymm_module_core = Extension('pymmcore',
                        define_macros = [('MAJOR_VERSION', '1'),
                                         ('CXX',''),
                                         ('MINOR_VERSION', '0')],
                        include_dirs = [include_dir,
                                        '/usr/local/include',
                                        '$ENV{MCAS_HOME}/src/python/pymm/core',
                                        '$ENV{MCAS_BINARY_DIR}/src/python/pymm/core',
                                        '$ENV{MCAS_HOME}/src/components',
                                        '$ENV{MCAS_HOME}/src/lib/libpmem/include',
                                        '$ENV{MCAS_HOME}/src/lib/common/include',
                                        '$ENV{MCAS_HOME}/src/mm',
                                        '$ENV{MCAS_HOME}/src/lib/libccpm/include',
                                        '${CMAKE_INSTALL_PREFIX}/include',
                                        '${PYTHON_SITE_NUMPY_INCLUDES}',
                        ],
                        library_dirs = ['/usr/lib/${PYTHON_FILENAME}/',
                                        '$ENV{MCAS_BINARY_DIR}/src/lib/libpmem',
                                        '$ENV{MCAS_BINARY_DIR}/src/lib/libccpm',
                                        '${CMAKE_INSTALL_PREFIX}/lib',
                                        '${CMAKE_INSTALL_PREFIX}/lib64',
                                        '/usr/local/lib',
                        ],
                        libraries = ['common','pmem', 'ccpm'],
                        sources = ['${CMAKE_CURRENT_SOURCE_DIR}/core/pymm_module.cc',
                                   '${CMAKE_CURRENT_SOURCE_DIR}/core/memory_resource_type.cc',
                                   '${CMAKE_CURRENT_SOURCE_DIR}/core/ndarray_helpers.cc',
                                   '${CMAKE_CURRENT_SOURCE_DIR}/core/transient_memory.cc',
                                   '${CMAKE_CURRENT_SOURCE_DIR}/core/list_type.cc',
                        ],
                        extra_compile_args = extra_compile_flags,
                        runtime_library_dirs = ['/usr/lib/${PYTHON_FILENAME}/',
                                                '${CMAKE_INSTALL_PREFIX}/lib',
                                                '${CMAKE_INSTALL_PREFIX}/lib64',
                                                '-Wl,--rpath=${CMAKE_INSTALL_PREFIX}/lib'
                        ]
)


setuptools.setup(
    name = 'MicroMcasApiPackage',
    version='0.1',
    author='Daniel Waddington',
    author_email='daniel.waddington@ibm.com',
    description='Micro MCAS API library',
    package_dir={ '': '${CMAKE_CURRENT_BINARY_DIR}', 'PyMM.Meta':'${CMAKE_CURRENT_BINARY_DIR}/PyMM/Meta' },
    ext_modules=[pymm_module_core],
    packages=['pymm','PyMM.Meta'],
    classifiers=[
        "Programming Language :: Python :: 3",
        "License :: OSI Approved :: Apache 2.0 License",
        "Operating System :: OS Independent",
    ],
    python_requires='>=3.5',
)



